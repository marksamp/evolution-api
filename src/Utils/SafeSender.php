<?php

namespace EvolutionAPI\Utils;

use EvolutionAPI\EvolutionAPIClient;
use EvolutionAPI\Exceptions\EvolutionAPIException;

/**
 * Classe para envio seguro de mensagens com prote√ß√£o anti-bloqueio
 */
class SafeSender
{
    /** @var EvolutionAPIClient */
    private $client;

    /** @var array */
    private $config;

    /** @var array */
    private $stats;

    /** @var array */
    private $historico;

    public function __construct(EvolutionAPIClient $client, array $config = [])
    {
        $this->client = $client;

        // Configura√ß√µes padr√£o (conservadoras)
        $this->config = array_merge([
            'mensagens_por_minuto' => 2,
            'mensagens_por_hora' => 50,
            'mensagens_por_dia' => 200,
            'delay_minimo' => 3,
            'delay_maximo' => 8,
            'usar_presenca' => true,
            'validar_numero' => true,
            'horario_inicio' => 8,
            'horario_fim' => 22,
            'permitir_domingo' => false,
            'max_falhas_consecutivas' => 3,
            'tempo_pausa_apos_falha' => 300, // 5 minutos
        ], $config);

        $this->stats = [
            'enviadas' => 0,
            'falhas' => 0,
            'bloqueios' => 0,
            'inicio' => time(),
            'falhas_consecutivas' => 0,
        ];

        $this->historico = [];
    }

    /**
     * Envia mensagem com todas as prote√ß√µes
     * @param string $number
     * @param string $message
     * @param array $options
     * @return array|false
     */
    public function send(string $number, string $message, array $options = [])
    {
        try {
            // 1. Verifica√ß√µes de seguran√ßa
            if (!$this->podeEnviar()) {
                $this->log('‚ö†Ô∏è Limite de envios atingido. Aguardando...');
                return false;
            }

            if (!$this->horarioPermitido()) {
                $this->log('‚è∞ Fora do hor√°rio permitido');
                return false;
            }

            // 2. Validar n√∫mero
            if ($this->config['validar_numero']) {
                if (!$this->validarNumero($number)) {
                    $this->log("‚ùå N√∫mero inv√°lido: {$number}");
                    $this->stats['falhas']++;
                    $this->stats['falhas_consecutivas']++;
                    return false;
                }
            }

            // 3. Delay antes de enviar
            $this->aguardarDelay();

            // 4. Simular presen√ßa humana
            if ($this->config['usar_presenca']) {
                $tempoDigitacao = $this->calcularTempoDigitacao($message);
                $this->client->presence()->simulateTyping($number, $tempoDigitacao);
            }

            // 5. Enviar mensagem
            $result = $this->client->message()->sendText($number, $message);

            // 6. Registrar sucesso
            $this->stats['enviadas']++;
            $this->stats['falhas_consecutivas'] = 0; // Resetar falhas consecutivas
            $this->registrarHistorico($number, $message, true);
            $this->log("‚úÖ Enviada para {$number}");

            return $result;

        } catch (EvolutionAPIException $e) {
            $this->stats['falhas']++;
            $this->stats['falhas_consecutivas']++;
            $this->registrarHistorico($number, $message, false, $e->getMessage());
            $this->log("‚ùå Erro ao enviar: " . $e->getMessage());

            // Verificar se √© bloqueio
            if ($this->isBloqueio($e)) {
                $this->stats['bloqueios']++;
                $this->log("üö® ALERTA: Poss√≠vel bloqueio detectado!");
            }

            // Verificar se deve pausar por muitas falhas
            if ($this->stats['falhas_consecutivas'] >= $this->config['max_falhas_consecutivas']) {
                $this->pausarPorFalhas();
            }

            return false;
        } catch (\Exception $e) {
            $this->stats['falhas']++;
            $this->stats['falhas_consecutivas']++;
            $this->log("‚ùå Erro geral: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Envia mensagens em lote com seguran√ßa
     * @param array $destinatarios ['numero' => 'mensagem']
     * @param callable|null $callback Fun√ß√£o callback para cada envio
     * @return array Estat√≠sticas do envio
     */
    public function sendBatch(array $destinatarios, callable $callback = null): array
    {
        $total = count($destinatarios);
        $contador = 0;

        $this->log("üì§ Iniciando envio em lote: {$total} mensagens");

        foreach ($destinatarios as $number => $message) {
            $contador++;

            $this->log("[{$contador}/{$total}] Processando {$number}...");

            // Enviar com prote√ß√£o
            $result = $this->send($number, $message);

            // Callback personalizado
            if ($callback) {
                $callback($number, $result, $contador, $total);
            }

            // Verificar se deve pausar
            if ($this->devePausar()) {
                $this->pausarEnvios();
            }
        }

        return $this->getStats();
    }

    /**
     * Envia mensagens com varia√ß√£o de templates
     * @param array $numbers
     * @param array $templates
     * @param array $variaveis
     * @return array
     */
    public function sendVariado(array $numbers, array $templates, array $variaveis = []): array
    {
        $destinatarios = [];

        foreach ($numbers as $number) {
            // Escolher template aleat√≥rio
            $template = $templates[array_rand($templates)];

            // Substituir vari√°veis
            $message = $this->processarTemplate($template, $variaveis[$number] ?? []);

            // Adicionar varia√ß√£o extra
            $message = $this->adicionarVariacao($message);

            $destinatarios[$number] = $message;
        }

        return $this->sendBatch($destinatarios);
    }

    /**
     * Verifica se pode enviar mensagem agora
     * @return bool
     */
    private function podeEnviar(): bool
    {
        $agora = time();

        // Contar envios nos √∫ltimos per√≠odos
        $enviosUltimoMinuto = $this->contarEnviosNosPeriodo(60);
        $enviosUltimaHora = $this->contarEnviosNosPeriodo(3600);
        $enviosHoje = $this->contarEnviosNosPeriodo(86400);

        // Verificar limites
        if ($enviosUltimoMinuto >= $this->config['mensagens_por_minuto']) {
            $this->log("‚è≥ Limite por minuto atingido ({$enviosUltimoMinuto}/{$this->config['mensagens_por_minuto']})");
            return false;
        }

        if ($enviosUltimaHora >= $this->config['mensagens_por_hora']) {
            $this->log("‚è≥ Limite por hora atingido ({$enviosUltimaHora}/{$this->config['mensagens_por_hora']})");
            return false;
        }

        if ($enviosHoje >= $this->config['mensagens_por_dia']) {
            $this->log("‚è≥ Limite di√°rio atingido ({$enviosHoje}/{$this->config['mensagens_por_dia']})");
            return false;
        }

        return true;
    }

    /**
     * Conta envios bem-sucedidos em um per√≠odo
     * @param int $segundos
     * @return int
     */
    private function contarEnviosNosPeriodo(int $segundos): int
    {
        $agora = time();
        $timestampLimite = $agora - $segundos;
        $contador = 0;

        foreach ($this->historico as $registro) {
            if ($registro['timestamp'] >= $timestampLimite && $registro['sucesso']) {
                $contador++;
            }
        }

        return $contador;
    }

    /**
     * Registra envio no hist√≥rico
     * @param string $number
     * @param string $message
     * @param bool $sucesso
     * @param string $erro
     * @return void
     */
    private function registrarHistorico(string $number, string $message, bool $sucesso, string $erro = ''): void
    {
        $this->historico[] = [
            'numero' => $number,
            'mensagem' => substr($message, 0, 50), // Primeiros 50 caracteres
            'sucesso' => $sucesso,
            'erro' => $erro,
            'timestamp' => time(),
            'data' => date('Y-m-d H:i:s'),
        ];

        // Limpar hist√≥rico antigo (manter √∫ltimas 24h)
        $this->limparHistoricoAntigo();
    }

    /**
     * Remove registros antigos do hist√≥rico
     * @return void
     */
    private function limparHistoricoAntigo(): void
    {
        $limite = time() - 86400; // 24 horas

        $this->historico = array_filter($this->historico, function($registro) use ($limite) {
            return $registro['timestamp'] >= $limite;
        });

        // Reindexar array
        $this->historico = array_values($this->historico);
    }

    /**
     * Verifica se est√° em hor√°rio permitido
     * @return bool
     */
    private function horarioPermitido(): bool
    {
        $hora = (int)date('H');
        $diaSemana = (int)date('N');

        // Verificar hor√°rio
        if ($hora < $this->config['horario_inicio'] || $hora > $this->config['horario_fim']) {
            return false;
        }

        // Verificar domingo
        if (!$this->config['permitir_domingo'] && $diaSemana === 7) {
            return false;
        }

        return true;
    }

    /**
     * Valida n√∫mero antes de enviar
     * @param string $number
     * @return bool
     */
    private function validarNumero(string $number): bool
    {
        try {
            return $this->client->checkNumber($number);
        } catch (\Exception $e) {
            $this->log("‚ö†Ô∏è Erro ao validar n√∫mero: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Aguarda delay aleat√≥rio entre mensagens
     * @return void
     */
    private function aguardarDelay(): void
    {
        $delay = rand($this->config['delay_minimo'], $this->config['delay_maximo']);
        $this->log("‚è±Ô∏è Aguardando {$delay} segundos...");
        sleep($delay);
    }

    /**
     * Calcula tempo de digita√ß√£o baseado no tamanho da mensagem
     * @param string $message
     * @return int Segundos
     */
    private function calcularTempoDigitacao(string $message): int
    {
        // Simular 40 palavras por minuto (200 chars/min)
        $caracteres = strlen($message);
        $segundos = ($caracteres / 200) * 60;

        // Limitar entre 2-8 segundos
        return max(2, min(8, (int)$segundos));
    }

    /**
     * Verifica se deve pausar os envios
     * @return bool
     */
    private function devePausar(): bool
    {
        // Pausar se taxa de erro for alta (mais de 30%)
        if ($this->stats['enviadas'] > 0) {
            $taxaErro = ($this->stats['falhas'] / ($this->stats['enviadas'] + $this->stats['falhas'])) * 100;

            if ($taxaErro > 30) {
                $this->log("‚ö†Ô∏è Taxa de erro alta: " . round($taxaErro, 2) . "%");
                return true;
            }
        }

        // Pausar se detectar bloqueios
        if ($this->stats['bloqueios'] > 0) {
            $this->log("üö® Bloqueios detectados: " . $this->stats['bloqueios']);
            return true;
        }

        // Pausar se muitas falhas consecutivas
        if ($this->stats['falhas_consecutivas'] >= $this->config['max_falhas_consecutivas']) {
            $this->log("üö® Muitas falhas consecutivas: " . $this->stats['falhas_consecutivas']);
            return true;
        }

        return false;
    }

    /**
     * Pausa envios por seguran√ßa
     * @return void
     */
    private function pausarEnvios(): void
    {
        $this->log('üö® PAUSANDO ENVIOS POR SEGURAN√áA!');
        $this->log('üìä Estat√≠sticas: ' . json_encode($this->stats));

        // Pausar por 1 hora
        $tempoPausa = 3600;
        $this->log("‚è∞ Aguardando {$tempoPausa} segundos (1 hora) antes de continuar...");
        sleep($tempoPausa);

        // Resetar contadores de falha
        $this->stats['falhas_consecutivas'] = 0;
        $this->log('‚úÖ Pausa conclu√≠da. Retomando envios...');
    }

    /**
     * Pausa por falhas consecutivas
     * @return void
     */
    private function pausarPorFalhas(): void
    {
        $tempoPausa = $this->config['tempo_pausa_apos_falha'];
        $this->log("‚ö†Ô∏è Pausando por {$tempoPausa} segundos devido a falhas consecutivas...");
        sleep($tempoPausa);
        $this->stats['falhas_consecutivas'] = 0;
    }

    /**
     * Verifica se exce√ß√£o indica bloqueio
     * @param EvolutionAPIException $e
     * @return bool
     */
    private function isBloqueio(EvolutionAPIException $e): bool
    {
        $message = strtolower($e->getMessage());

        $indicadores = [
            'blocked',
            'banned',
            'spam',
            'forbidden',
            '403',
            'not authorized',
            'violation',
        ];

        foreach ($indicadores as $indicador) {
            if (strpos($message, $indicador) !== false) {
                return true;
            }
        }

        return false;
    }

    /**
     * Processa template com vari√°veis
     * @param string $template
     * @param array $variaveis
     * @return string
     */
    private function processarTemplate(string $template, array $variaveis): string
    {
        foreach ($variaveis as $chave => $valor) {
            $template = str_replace('{' . $chave . '}', $valor, $template);
        }

        return $template;
    }

    /**
     * Adiciona varia√ß√µes para evitar mensagens id√™nticas
     * @param string $message
     * @return string
     */
    private function adicionarVariacao(string $message): string
    {
        // Emojis aleat√≥rios (com modera√ß√£o)
        $emojis = ['üòä', 'üëã', '‚ú®', 'üéâ', 'üí°', ''];
        $emoji = $emojis[array_rand($emojis)];

        // Adicionar emoji ocasionalmente (50% de chance)
        if (rand(0, 1) && !empty($emoji)) {
            $message .= ' ' . $emoji;
        }

        // Varia√ß√µes de pontua√ß√£o
        $pontuacoes = ['.', '!', ''];
        if (!preg_match('/[.!?]$/', $message)) {
            $message .= $pontuacoes[array_rand($pontuacoes)];
        }

        return $message;
    }

    /**
     * Retorna estat√≠sticas dos envios
     * @return array
     */
    public function getStats(): array
    {
        $tempoTotal = time() - $this->stats['inicio'];
        $totalMensagens = $this->stats['enviadas'] + $this->stats['falhas'];
        $taxaSucesso = $totalMensagens > 0
            ? (($this->stats['enviadas']) / $totalMensagens) * 100
            : 0;

        return [
            'enviadas' => $this->stats['enviadas'],
            'falhas' => $this->stats['falhas'],
            'bloqueios' => $this->stats['bloqueios'],
            'falhas_consecutivas' => $this->stats['falhas_consecutivas'],
            'taxa_sucesso' => round($taxaSucesso, 2) . '%',
            'tempo_total' => $tempoTotal,
            'msgs_por_minuto' => $tempoTotal > 0 ? round($this->stats['enviadas'] / ($tempoTotal / 60), 2) : 0,
        ];
    }

    /**
     * Exibe estat√≠sticas formatadas
     * @return void
     */
    public function mostrarStats(): void
    {
        $stats = $this->getStats();

        echo "<br>";
        echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó<br>";
        echo "‚ïë     ESTAT√çSTICAS DE ENVIO SEGURO       ‚ïë<br>";
        echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£<br>";
        echo sprintf("‚ïë ‚úÖ Enviadas:       %18d ‚ïë<br>", $stats['enviadas']);
        echo sprintf("‚ïë ‚ùå Falhas:         %18d ‚ïë<br>", $stats['falhas']);
        echo sprintf("‚ïë üö´ Bloqueios:      %18d ‚ïë<br>", $stats['bloqueios']);
        echo sprintf("‚ïë ‚ö†Ô∏è  Falhas Consec: %18d ‚ïë<br>", $stats['falhas_consecutivas']);
        echo sprintf("‚ïë üìä Taxa Sucesso:   %18s ‚ïë<br>", $stats['taxa_sucesso']);
        echo sprintf("‚ïë ‚è±Ô∏è Tempo Total:    %17ds ‚ïë<br>", $stats['tempo_total']);
        echo sprintf("‚ïë üìà Msgs/Minuto:    %18s ‚ïë<br>", $stats['msgs_por_minuto']);
        echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù<br>";
        echo "<br>";
    }

    /**
     * Obt√©m hist√≥rico de envios
     * @param int|null $ultimos N√∫mero de registros (null = todos)
     * @return array
     */
    public function getHistorico(int $ultimos = null): array
    {
        if ($ultimos === null) {
            return $this->historico;
        }

        return array_slice($this->historico, -$ultimos);
    }

    /**
     * Exporta hist√≥rico para arquivo
     * @param string $arquivo
     * @return bool
     */
    public function exportarHistorico(string $arquivo): bool
    {
        $conteudo = "Data,Numero,Mensagem,Sucesso,Erro<br>";

        foreach ($this->historico as $registro) {
            $conteudo .= sprintf(
                "%s,%s,\"%s\",%s,\"%s\"<br>",
                $registro['data'],
                $registro['numero'],
                str_replace('"', '""', $registro['mensagem']),
                $registro['sucesso'] ? 'Sim' : 'N√£o',
                str_replace('"', '""', $registro['erro'])
            );
        }

        return file_put_contents($arquivo, $conteudo) !== false;
    }

    /**
     * Configura limites personalizados
     * @param array $limites
     * @return void
     */
    public function setLimites(array $limites): void
    {
        $this->config = array_merge($this->config, $limites);
    }

    /**
     * Obt√©m configura√ß√£o atual
     * @return array
     */
    public function getConfig(): array
    {
        return $this->config;
    }

    /**
     * Reseta estat√≠sticas
     * @return void
     */
    public function resetStats(): void
    {
        $this->stats = [
            'enviadas' => 0,
            'falhas' => 0,
            'bloqueios' => 0,
            'inicio' => time(),
            'falhas_consecutivas' => 0,
        ];
    }

    /**
     * Limpa hist√≥rico
     * @return void
     */
    public function limparHistorico(): void
    {
        $this->historico = [];
    }

    /**
     * Log de atividades
     * @param string $message
     * @return void
     */
    private function log(string $message): void
    {
        $timestamp = date('Y-m-d H:i:s');
        echo "[{$timestamp}] {$message}<br>";

        // Opcional: salvar em arquivo
        // file_put_contents('safe_sender.log', "[{$timestamp}] {$message}<br>", FILE_APPEND);
    }

    /**
     * Cria configura√ß√£o para n√∫mero novo (mais restritiva)
     * @return array
     */
    public static function configNumeroNovo(): array
    {
        return [
            'mensagens_por_minuto' => 1,
            'mensagens_por_hora' => 20,
            'mensagens_por_dia' => 50,
            'delay_minimo' => 5,
            'delay_maximo' => 10,
            'usar_presenca' => true,
            'validar_numero' => true,
            'max_falhas_consecutivas' => 2,
        ];
    }

    /**
     * Cria configura√ß√£o para n√∫mero estabelecido (menos restritiva)
     * @return array
     */
    public static function configNumeroEstabelecido(): array
    {
        return [
            'mensagens_por_minuto' => 3,
            'mensagens_por_hora' => 100,
            'mensagens_por_dia' => 300,
            'delay_minimo' => 2,
            'delay_maximo' => 5,
            'usar_presenca' => true,
            'validar_numero' => true,
            'max_falhas_consecutivas' => 3,
        ];
    }

    /**
     * Cria configura√ß√£o para n√∫mero verificado/business
     * @return array
     */
    public static function configNumeroBusiness(): array
    {
        return [
            'mensagens_por_minuto' => 5,
            'mensagens_por_hora' => 200,
            'mensagens_por_dia' => 500,
            'delay_minimo' => 1,
            'delay_maximo' => 3,
            'usar_presenca' => true,
            'validar_numero' => false,
            'max_falhas_consecutivas' => 5,
        ];
    }
}